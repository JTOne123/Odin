{"name":"Odin","tagline":"Conventions based command line routing","body":"# Odin\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/4s75vka56cos0h87/branch/master?svg=true)](https://ci.appveyor.com/project/crmckenzie/odin/branch/master)\r\n\r\nIn the .NET space there are a number of good libraries to handle run-of-the-mill command line argument parsing.\r\nMy current favorite is a nuget package called simply [CommandLineParser].\r\nSo why write a new one?\r\n\r\n## Inspired By Thor\r\n\r\nI've done some work with Ruby over the last couple of years and I was really impressed with the feature set offered by a ruby project called [thor]\r\nIn addition to a declarative approach to binding options to actions and arguments, thor supports the concept of subcommands.\r\nWe've seen subcommands used to great effect in command-line programs such as `git` and `nuget`, but current command line parser packages\r\noffer little help with this feature.\r\n\r\n## Inspired by Convention Over Configuration\r\n\r\nIn ASP .NET MVC, urls are routed to the appropriate controller and action by convention. `http://mysite.domain/Home/Index` is understood to route to a controller called \"Home\" and invoke a method called \"Index.\"\r\nIn addition, little manual wiring is required because ASP .NET MVC can discover and instantiate the controller easily at runtime.\r\nI wondered if it would be possible to use a combination of reflection and convention to create a command-line application in C#.\r\n\r\n## Goals\r\n\r\n* Given `program command subcommand action --arg1 value1 --arg2 value2`\r\n* Odin should resolve to the correct method invocation with as little wiring as possible.\r\n    * The above example should be interpreted as:\r\n        * find a component called `command`\r\n        * within `command` find a component or action called `subcommand`\r\n        * within `subcommand` find a subcommand or action called `action`\r\n        * once a method is located, coerce the arguments to that method to the correct types and invoke the method\r\n    * Failure to resolve a command should result in context-sensitive help\r\n* Odin commands should support a default action.\r\n* Odin should support custom conventions for how arguments should be formatted and routed.\r\n  * Provide some built-in conventions for common argument styles\r\n  * e.g. -a, --argument, --compound-argument, /argument, /argument:value\r\n  * conventions should be overridable via attributes+\r\n* Odin should provide auto-generated help.\r\n  * Help should be context sensitive\r\n  * Help format should be overridable\r\n* Odin should communicate to the Console via an overridable Logger.\r\n* Odin should not impose overall program structure on developers\r\n* Odin should interoperate with arbitrary Dependency Injection frameworks.\r\n* Odin should report its interpretation of routing in an externally testable manner.\r\n* Odin should automatically parse arguments into common framework types\r\n  * Odin should allow overrideble parsing algorithms.\r\n\r\n## Back of the Paper Napkin Usage Design\r\n\r\n```csharp\r\n[DefaultAction(\"DoSomething\")]\r\n[Description(\"This is the default controller\")]\r\npublic class DefaultController : Controller\r\n{\r\n    [Action]\r\n    [Description(\"A description of the DoSomething() method.\")]\r\n    public void DoSomething(\r\n        [Description(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit\")]\r\n        string argument1 = \"value1-not-passed\", \r\n        [Description(\"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\")]\r\n        string argument2 = \"value2-not-passed\", \r\n        [Description(\"Ut enim ad minim veniam\")]\r\n        string argument3 = \"value3-not-passed\")\r\n    {\r\n        // do something here\r\n    }\r\n}\r\n```\r\n\r\n[CommandLineParser]:https://www.nuget.org/packages/CommandLineParser\r\n[thor]:http://whatisthor.com","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}